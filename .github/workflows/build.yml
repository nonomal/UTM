name: Build
on:
  push:
    branches:
      - 'master'
      - 'dev'
    tags-ignore:
      - '**'
    paths-ignore:
      - 'LICENSE'
      - '**.md'
  pull_request:
  release:
    types: [created]

jobs:
  build:
    name: Build UTM
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [arm64, x86_64]
        platform: [ios, macos]
    steps:
      - name: Checkout
        uses: actions/checkout@v1
        with:
          submodules: recursive
      - name: Setup Xcode
        shell: bash
        run: sudo xcode-select -switch /Applications/Xcode_12.2.app
      - name: Cache Sysroot
        id: cache-sysroot
        uses: actions/cache@v1
        with:
          path: sysroot-${{ matrix.platform }}-${{ matrix.arch }}
          key: ${{ matrix.platform }}-${{ matrix.arch }}-${{ hashFiles('scripts/build_dependencies.sh') }}-${{ hashFiles('patches/**') }}
      - name: Setup Path
        shell: bash
        run: |
          echo "/usr/local/opt/gettext/bin" >> $GITHUB_PATH
          echo "/usr/local/opt/bison/bin" >> $GITHUB_PATH
      - name: Build Sysroot
        if: steps.cache-sysroot.outputs.cache-hit != 'true'
        run: |
          brew install bison pkg-config nasm make meson
          rm -f /usr/local/lib/pkgconfig/*.pc
          ./scripts/build_dependencies.sh -p ${{ matrix.platform }} -a ${{ matrix.arch }}
      - name: Compress Sysroot
        if: steps.cache-sysroot.outputs.cache-hit != 'true'
        run: |
          mkdir sysroot_tar
          tar cf sysroot_tar/sysroot.tgz sysroot*
      - name: Upload Sysroot
        if: steps.cache-sysroot.outputs.cache-hit != 'true'
        uses: actions/upload-artifact@v1
        with:
          name: Sysroot-${{ matrix.platform }}-${{ matrix.arch }}
          path: sysroot_tar
      - name: Build UTM
        run: ./scripts/build_utm.sh -p ${{ matrix.platform }} -a ${{ matrix.arch }} -o build-utm/UTM
      - name: Upload UTM
        uses: actions/upload-artifact@v1
        with:
          name: UTM-${{ matrix.platform }}-${{ matrix.arch }}
          path: build-utm
  build-universal:
    name: Build UTM (macOS Universal)
    runs-on: macos-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v1
        with:
          submodules: recursive
      - name: Cache Sysroot
        id: cache-sysroot
        uses: actions/cache@v1
        with:
          path: sysroot-macOS-arm64_x86_64
          key: macos-universal-${{ hashFiles('scripts/build_dependencies.sh') }}-${{ hashFiles('patches/**') }}
      - name: Download Sysroot (arm64)
        if: steps.cache-sysroot.outputs.cache-hit != 'true'
        uses: actions/download-artifact@v1
        with:
          name: Sysroot-macos-arm64
      - name: Download Sysroot (x86_64)
        if: steps.cache-sysroot.outputs.cache-hit != 'true'
        uses: actions/download-artifact@v1
        with:
          name: Sysroot-macos-x86_64
      - name: Pack Universal Sysroot
        if: steps.cache-sysroot.outputs.cache-hit != 'true'
        run: |
          tar xf Sysroot-macos-arm64/sysroot.tgz
          tar xf Sysroot-macos-x86_64/sysroot.tgz
          ./scripts/pack_dependencies.sh . macos arm64 x86_64
      - name: Compress Sysroot
        if: steps.cache-sysroot.outputs.cache-hit != 'true'
        run: |
          rm -rf sysroot_tar
          mkdir sysroot_tar
          tar cf sysroot_tar/sysroot.tgz sysroot-macOS-arm64_x86_64
      - name: Upload Sysroot
        if: steps.cache-sysroot.outputs.cache-hit != 'true'
        uses: actions/upload-artifact@v1
        with:
          name: Sysroot-macos-universal
          path: sysroot_tar
      - name: Setup Xcode
        shell: bash
        run: sudo xcode-select -switch /Applications/Xcode_12.2.app
      - name: Build UTM
        run: ./scripts/build_utm.sh -p macos -a "arm64 x86_64" -o build-utm/UTM
      - name: Upload UTM
        uses: actions/upload-artifact@v1
        with:
          name: UTM-macos-universal
          path: build-utm
  package-ios:
    name: Package (iOS)
    runs-on: macos-latest
    needs: build
    if: github.event_name == 'release'
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Download Artifact
        uses: actions/download-artifact@v1
        with:
          name: UTM-ios-arm64
      - name: Install ldid
        run: |
          brew install ldid
      - name: Fakesign IPA
        run: |
          find UTM-ios-arm64/UTM.xcarchive -type f \( -path '*/UTM.app/UTM' -or -path '*/UTM.app/Frameworks/*.dylib' \) -exec chmod +x \{\} \;
          ./scripts/resign.sh UTM-ios-arm64/UTM.xcarchive .
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: UTM.ipa
          asset_name: UTM.ipa
          asset_content_type: application/octet-stream
      - name: Send Dispatch Event
        continue-on-error: true
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          repository: ${{ secrets.DISPATCH_REPO_NAME }}
          event-type: new-release
  package-mac:
    name: Package (macOS)
    runs-on: macos-latest
    needs: build-universal
    if: github.event_name == 'release'
    steps:
      - name: Import signing certificate into keychain
        run: |
          KEYCHAIN_FILE=default.keychain
          KEYCHAIN_PASSWORD=myvoiceismypassport
          security create-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN_FILE
          security default-keychain -s $KEYCHAIN_FILE
          security unlock-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN_FILE
          security import <(echo $SIGNING_CERTIFICATE_P12_DATA | base64 --decode) \
                          -f pkcs12 \
                          -k $KEYCHAIN_FILE \
                          -P $SIGNING_CERTIFICATE_PASSWORD \
                          -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k $KEYCHAIN_PASSWORD $KEYCHAIN_FILE
        env:
          SIGNING_CERTIFICATE_P12_DATA: ${{ secrets.SIGNING_CERTIFICATE_P12_DATA }}
          SIGNING_CERTIFICATE_PASSWORD: ${{ secrets.SIGNING_CERTIFICATE_PASSWORD }}
      - name: Download Artifact
        uses: actions/download-artifact@v1
        with:
          name: UTM-macos-universal
      - name: Fixup Permissions
        run: find UTM-macos-universal/UTM.xcarchive -type f \( -path '*/Contents/MacOS/*' -or -path '*/Frameworks/*.dylib' \) -exec chmod +x \{\} \;
      - name: Package for Release
        run: ./scripts/resign_mac.sh UTM-macos-universal/UTM.xcarchive . "$SIGNING_TEAM_ID"
        env:
          SIGNING_TEAM_ID: ${{ secrets.SIGNING_TEAM_ID }}
      - name: Notarize app
        run: npx notarize-cli --file "UTM.dmg"
        env:
          NOTARIZE_USERNAME: ${{ secrets.SIGNING_USERNAME }}
          NOTARIZE_PASSWORD: ${{ secrets.SIGNING_PASSWORD }}
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: UTM.dmg
          asset_name: UTM.dmg
          asset_content_type: application/octet-stream
